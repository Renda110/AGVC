"""autogenerated by genpy from goal_provider/AutonomousStatus.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class AutonomousStatus(genpy.Message):
  _md5sum = "ea7b197e2bb17b8ba245241eff172721"
  _type = "goal_provider/AutonomousStatus"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
geometry_msgs/Point goal            #The goal we are heading to

uint8 status
  uint8 ACTIVE    = 1            #We are actively heading to a goal
  uint8 WAITING   = 2            #We are waiting for a goal to be accepted by move_base
  uint8 REJECTED  = 3            #Movebase rejected our goal
  uint8 ABORTED   = 4            #Movebase aborted our goal
  uint8 REACHED   = 5            #We have reached the goal and can start planning for the next one
  uint8 LOST      = 6            #We are lost and don't know what is happening anymore. This is terminal
  uint8 PREEMPTED = 7            #Another goal took priority over this one
  uint8 UPDATING  = 8            #Updating the goal or not
  uint8 ERROR     = 9            #Goal provider has gone gammy
  uint8 INFO      = 10           #INFO message

std_msgs/String text                         #For extra information

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: std_msgs/String
string data

"""
  # Pseudo-constants
  ACTIVE = 1
  WAITING = 2
  REJECTED = 3
  ABORTED = 4
  REACHED = 5
  LOST = 6
  PREEMPTED = 7
  UPDATING = 8
  ERROR = 9
  INFO = 10

  __slots__ = ['header','goal','status','text']
  _slot_types = ['std_msgs/Header','geometry_msgs/Point','uint8','std_msgs/String']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,goal,status,text

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AutonomousStatus, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.goal is None:
        self.goal = geometry_msgs.msg.Point()
      if self.status is None:
        self.status = 0
      if self.text is None:
        self.text = std_msgs.msg.String()
    else:
      self.header = std_msgs.msg.Header()
      self.goal = geometry_msgs.msg.Point()
      self.status = 0
      self.text = std_msgs.msg.String()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3dB.pack(_x.goal.x, _x.goal.y, _x.goal.z, _x.status))
      _x = self.text.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.goal is None:
        self.goal = geometry_msgs.msg.Point()
      if self.text is None:
        self.text = std_msgs.msg.String()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 25
      (_x.goal.x, _x.goal.y, _x.goal.z, _x.status,) = _struct_3dB.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.text.data = str[start:end].decode('utf-8')
      else:
        self.text.data = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3dB.pack(_x.goal.x, _x.goal.y, _x.goal.z, _x.status))
      _x = self.text.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.goal is None:
        self.goal = geometry_msgs.msg.Point()
      if self.text is None:
        self.text = std_msgs.msg.String()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 25
      (_x.goal.x, _x.goal.y, _x.goal.z, _x.status,) = _struct_3dB.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.text.data = str[start:end].decode('utf-8')
      else:
        self.text.data = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_3dB = struct.Struct("<3dB")
