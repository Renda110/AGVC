/* Auto-generated by genmsg_cpp for file /home/liampoli/ROS_Packages/robot_comms/srv/FoundObject.srv */
#ifndef ROBOT_COMMS_SERVICE_FOUNDOBJECT_H
#define ROBOT_COMMS_SERVICE_FOUNDOBJECT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace robot_comms
{
template <class ContainerAllocator>
struct FoundObjectRequest_ {
  typedef FoundObjectRequest_<ContainerAllocator> Type;

  FoundObjectRequest_()
  : filter_id(0)
  {
  }

  FoundObjectRequest_(const ContainerAllocator& _alloc)
  : filter_id(0)
  {
  }

  typedef int64_t _filter_id_type;
  int64_t filter_id;


  typedef boost::shared_ptr< ::robot_comms::FoundObjectRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_comms::FoundObjectRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct FoundObjectRequest
typedef  ::robot_comms::FoundObjectRequest_<std::allocator<void> > FoundObjectRequest;

typedef boost::shared_ptr< ::robot_comms::FoundObjectRequest> FoundObjectRequestPtr;
typedef boost::shared_ptr< ::robot_comms::FoundObjectRequest const> FoundObjectRequestConstPtr;


template <class ContainerAllocator>
struct FoundObjectResponse_ {
  typedef FoundObjectResponse_<ContainerAllocator> Type;

  FoundObjectResponse_()
  : result(0)
  {
  }

  FoundObjectResponse_(const ContainerAllocator& _alloc)
  : result(0)
  {
  }

  typedef int64_t _result_type;
  int64_t result;


  typedef boost::shared_ptr< ::robot_comms::FoundObjectResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_comms::FoundObjectResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct FoundObjectResponse
typedef  ::robot_comms::FoundObjectResponse_<std::allocator<void> > FoundObjectResponse;

typedef boost::shared_ptr< ::robot_comms::FoundObjectResponse> FoundObjectResponsePtr;
typedef boost::shared_ptr< ::robot_comms::FoundObjectResponse const> FoundObjectResponseConstPtr;

struct FoundObject
{

typedef FoundObjectRequest Request;
typedef FoundObjectResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct FoundObject
} // namespace robot_comms

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::robot_comms::FoundObjectRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::robot_comms::FoundObjectRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::robot_comms::FoundObjectRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "df5b073eb2c62b846cf973c597df7ad7";
  }

  static const char* value(const  ::robot_comms::FoundObjectRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xdf5b073eb2c62b84ULL;
  static const uint64_t static_value2 = 0x6cf973c597df7ad7ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_comms::FoundObjectRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robot_comms/FoundObjectRequest";
  }

  static const char* value(const  ::robot_comms::FoundObjectRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::robot_comms::FoundObjectRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int64 filter_id\n\
\n\
\n\
";
  }

  static const char* value(const  ::robot_comms::FoundObjectRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::robot_comms::FoundObjectRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::robot_comms::FoundObjectResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::robot_comms::FoundObjectResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::robot_comms::FoundObjectResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "9b05623554ab950ed237d43d45f0b4dd";
  }

  static const char* value(const  ::robot_comms::FoundObjectResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x9b05623554ab950eULL;
  static const uint64_t static_value2 = 0xd237d43d45f0b4ddULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_comms::FoundObjectResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robot_comms/FoundObjectResponse";
  }

  static const char* value(const  ::robot_comms::FoundObjectResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::robot_comms::FoundObjectResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int64 result\n\
\n\
\n\
";
  }

  static const char* value(const  ::robot_comms::FoundObjectResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::robot_comms::FoundObjectResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::robot_comms::FoundObjectRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.filter_id);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct FoundObjectRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::robot_comms::FoundObjectResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.result);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct FoundObjectResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<robot_comms::FoundObject> {
  static const char* value() 
  {
    return "80825786ac8e53e4ca138e168c03ada7";
  }

  static const char* value(const robot_comms::FoundObject&) { return value(); } 
};

template<>
struct DataType<robot_comms::FoundObject> {
  static const char* value() 
  {
    return "robot_comms/FoundObject";
  }

  static const char* value(const robot_comms::FoundObject&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<robot_comms::FoundObjectRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "80825786ac8e53e4ca138e168c03ada7";
  }

  static const char* value(const robot_comms::FoundObjectRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<robot_comms::FoundObjectRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robot_comms/FoundObject";
  }

  static const char* value(const robot_comms::FoundObjectRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<robot_comms::FoundObjectResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "80825786ac8e53e4ca138e168c03ada7";
  }

  static const char* value(const robot_comms::FoundObjectResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<robot_comms::FoundObjectResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robot_comms/FoundObject";
  }

  static const char* value(const robot_comms::FoundObjectResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // ROBOT_COMMS_SERVICE_FOUNDOBJECT_H

